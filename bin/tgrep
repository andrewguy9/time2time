#!/usr/bin/env python
# A version of grep which filters by timestamp.

import argparse
import re
from time import strptime
from operator import ge as greater_than
from operator import le as less_than

digit_expr = re.compile('[0-9]')

parser = argparse.ArgumentParser(description='A version of grep which filters by timestamp.')
parser.add_argument('--low', type=str, dest='low', action='store', help='match values greather than this')
parser.add_argument('--high', type=str, dest='high', action='store', help='match values less than this')
parser.add_argument('files', nargs='*', default=['/dev/stdin'], help='list of files to read. If no files are specified, reads from stdin')

def parse_time(s):

  format_str = '%Y-%m-%d %H:%M:%S.%f %Z'
  format_len = '04102102102102102104103'
  slice_len = sum(map(int, digit_expr.findall(format_str)))

  #TODO In the futrure try many formats.
  try:
    print "Attemptign to match %s of len %d" % (s[0:slice_len], slice_len)
    return strptime(s[0:slice_len], format_str)
  except ValueError as e:
    print "But i got a value error"
    return  ""

def main():
  constraints = []
  args = parser.parse_args()
  if args.low:
    constraints.append( (parse_time(args.low), greater_than) )
  if args.high:
    constraints.append( (parse_time(args.high), less_than) )
  for fname in args.files:
    with open(fname, 'r') as f:
      for line in f.readlines():
        t = parse_time(line)
        accept = True
        for limit, comparison in constraints:
          if not comparison(t, limit):
            accept = False
            break
        if args.invert:
          accept= not accept
        if accept:
          print line

if __name__ == "__main__":
  main()

