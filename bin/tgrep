#!/usr/bin/env python
# A version of grep which filters by timestamp.

import argparse
from signal import signal, SIGPIPE, SIG_DFL 
from _strptime import TimeRE as formatGenerator
import sys
from time import strptime

parser = argparse.ArgumentParser(description='A version of grep which filters by timestamp.')
parser.add_argument('--format', type=str, dest='format', action='store', required=True, help='format string for timestamps')
parser.add_argument('--start', type=str, dest='start', action='store', help='match values greather than this')
parser.add_argument('--stop', type=str, dest='stop', action='store', help='match values less than this')
parser.add_argument('files', nargs='*', default=['/dev/stdin'], help='list of files to read. If no files are specified, reads from stdin')

fg = formatGenerator()

def split_line(expr, line):
    match = expr.match(line)
    if match:
        date = match.group()
        rest = line[match.end():]
        return (date,rest)
    else:
        return (None,line)

def main():
    args = parser.parse_args()
    if args.start:
        lower_bound = strptime(args.start, args.format)
    else:
        lower_bound = None
    upper_bound = sys.maxint
    if args.stop:
        upper_bound = strptime(args.stop, args.format)
    else:
        upper_bound = None
    format_expr = fg.compile(args.format)

    for fname in args.files:
        with open(fname, 'r') as f:
            last_time = None
            for line in f.readlines():
                (t,r) = split_line(format_expr, line)
                if t:
                    last_time = strptime(t, args.format)
                if not last_time:
                    continue
                if lower_bound and last_time < lower_bound:
                    continue
                if upper_bound and last_time > upper_bound:
                    continue
                sys.stdout.write(line)
    sys.stdout.flush()

if __name__ == "__main__":
    signal(SIGPIPE,SIG_DFL) 
    main()

