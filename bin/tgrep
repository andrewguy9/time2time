#!/usr/bin/env python
# A version of grep which filters by timestamp.

import argparse
import sys
from time2time.format import get_format_string, get_format_strings
from time2time import get_time
from cmdutil.formatters import to_table


def generate_epolog():
    formats = get_format_strings()
    return "List of formats available:\n" + to_table(formats)

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description='A version of grep which filters by timestamp.',
    epilog=generate_epolog())
parser.add_argument(
    '--format',
    type=str,
    dest='format',
    action='store',
    required=True,
    help='format string for timestamps')
parser.add_argument(
    '--start',
    type=str,
    dest='start',
    action='store',
    help='match values greather than this')
parser.add_argument(
    '--stop',
    type=str,
    dest='stop',
    action='store',
    help='match values less than this')
parser.add_argument(
    'files',
    nargs='*',
    default=['/dev/stdin'],
    help='list of files to read. If no files are specified, reads from stdin')


def generate_constraints(start, stop, time_format):
    constraints = []
    # We only want to print lines if we know the
    # date of the lines were looking at.
    constraints.append(lambda x: x is not None)
    if start:
        lower_bound = get_time(time_format, start)
        constraints.append(lambda x: x > lower_bound)
    if stop:
        upper_bound = get_time(time_format, stop)
        constraints.append(lambda x: x < upper_bound)
    return constraints


def main():
    args = parser.parse_args()
    time_format = get_format_string(args.format)
    constraints = generate_constraints(args.start, args.stop, time_format)

    for fname in args.files:
        with open(fname, 'r') as f:
            time = None
            for line in f.readlines():
                try:
                    time = get_time(time_format, line)
                except ValueError as e:
                    pass
                if not all(map(lambda constraint: constraint(time), constraints)):
                    continue
                try:
                    sys.stdout.write(line)
                except IOError:
                    return
                except Exception as e:
                    raise e
    sys.stdout.flush()

if __name__ == "__main__":
    main()
