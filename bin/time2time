#!/usr/bin/env python
# A timestamp conversion tool

import argparse
from _strptime import TimeRE as formatGenerator
import sys
from time import strptime, strftime
from time2time.format import get_format_string, get_format_strings
from time2time import split_time_str
from cmdutil.formatters import to_table

def generate_epolog():
    formats = get_format_strings()
    return "List of formats available:\n" + to_table(formats)

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='A script to convert from one time format to another', epilog=generate_epolog())
parser.add_argument('-i','--input', type=str, dest='input', action='store', required=True, help='strftime format string for input')
parser.add_argument('-o','--output',   type=str, dest='output',   action='store', required=True, help='strptime format string for output')
parser.add_argument('files', nargs='*', default=['/dev/stdin'], help='list of files to read. If no files are specified, reads from stdin')

fg = formatGenerator()

def main():

    args = parser.parse_args()
    input_format  = get_format_string(args.input)
    output_format = get_format_string(args.output)
    input_expr  = fg.compile(input_format)

    for fname in args.files:
        with open(fname, 'r') as f:
            for line in f.readlines():
                (t,r) = split_time_str(input_expr, line)
                if t:
                    t_struct = strptime(t, input_format)
                    new_time = strftime(output_format, t_struct)
                    new_line = new_time+r
                else:
                    new_line = r
                try:
                    sys.stdout.write(new_line)
		except IOError:
                    return
                except Exception as e:
                    raise e
    sys.stdout.flush()

if __name__ == "__main__":
    main()

