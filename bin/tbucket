#!/usr/bin/env python
#Buckets timestamps by some data property.

from argparse import ArgumentParser, RawTextHelpFormatter
from time2time import get_time
from time2time.format import get_format_string, get_format_strings
from time2time.bucketize import get_bucket_names, get_bucketizer
from cmdutil.formatters import to_table
from cmdutil.mux import Demux


def generate_epolog():
    formats = get_format_strings()
    format_output = "list of formats available:\n%s\n\n" \
        % (to_table(formats, delim=' : '))
    bucket_output = "list of buckets available: %s\n\n" \
        % (', '.join(get_bucket_names()))
    return format_output + bucket_output

parser = ArgumentParser(
    formatter_class=RawTextHelpFormatter,
    description='Buckets log lines by minute,hour,second etc.',
    epilog=generate_epolog())
parser.add_argument(
    '--format',
    type=str,
    dest='format',
    action='store',
    required=True,
    help='format string for timestamps')
parser.add_argument(
    '--bucket-by',
    type=str,
    dest='bucket_by',
    action='store',
    required=True,
    help='What to bucket by')
parser.add_argument(
    '--output-dir',
    type=str,
    dest='output_dir',
    action='store',
    required=True,
    help='Where do dump the streams')
parser.add_argument(
    'files',
    nargs='*',
    default=['/dev/stdin'],
    help='list of files to read. If no files are specified, reads from stdin')


def main():
    args = parser.parse_args()
    time_format = get_format_string(args.format)
    demux = Demux(args.output_dir)
    bucketize = get_bucketizer(args.bucket_by)
    for fname in args.files:
        with open(fname, 'r') as f:
            time = None
            for line in f.readlines():
                try:
                    time = get_time(time_format, line)
                except ValueError:
                    pass
                if time:
                    bucket = bucketize(time)
                    bucket_str = "_".join(map(str, bucket))
                    demux.append(bucket_str, line)
                else:
                    print line

if __name__ == "__main__":
    main()

